{"status":{},"product_version":"2.7.1.2","spec":{"description":"","resources":{"client_attrs":{"c6232c93-61b7-42c3-9a67-062abd32727b":{"y":421,"x":589.5},"None":{"y":421,"x":589.5},"965b427d-89fd-42e9-aab3-215b355d0c07":{"y":421,"x":589.5},"d9df49d3_deployment":{"y":289,"x":725.5}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows2019gui"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5099ee22_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"f666cee9_runbook","main_task_local_reference":{"kind":"app_task","name":"5099ee22_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows2019gui"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"c0af5652_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"6337c938_runbook","main_task_local_reference":{"kind":"app_task","name":"c0af5652_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows2019gui"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ebb22e9c_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"53e016c4_runbook","main_task_local_reference":{"kind":"app_task","name":"ebb22e9c_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows2019gui"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"a375fe77_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"252d8b28_runbook","main_task_local_reference":{"kind":"app_task","name":"a375fe77_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows2019gui"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"c71c893a_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"efb65c85_runbook","main_task_local_reference":{"kind":"app_task","name":"c71c893a_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"Windows2019gui","port_list":[],"tier":"","variable_list":[],"description":""}],"substrate_definition_list":[{"description":"","action_list":[],"type":"AHV_VM","name":"AHV_Windows","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","disable_readiness_probe":false,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"60","connection_port":5985,"login_credential_local_reference":{"kind":"app_credential","name":"Creds_WINDOWS"}},"editables":{"create_spec":{"resources":{"nic_list":{},"serial_port_list":{}}}},"os_type":"Windows","create_spec":{"name":"WIN@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"89c4632d-c481-48e1-ba35-bb920855c717"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":1,"gpu_list":[],"memory_size_mib":2048,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":null,"type":"","sysprep":{"install_type":"PREPARED","unattend_xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n  <settings pass=\"specialize\">\n     <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n        <ComputerName>@@{calm_application_name}@@<\/ComputerName>\n        <RegisteredOrganization><\/RegisteredOrganization>\n        <RegisteredOwner><\/RegisteredOwner>\n        <TimeZone>UTC<\/TimeZone>\n     <\/component>\n     <component xmlns=\"\" name=\"Microsoft-Windows-TerminalServices-LocalSessionManager\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n        <fDenyTSConnections>false<\/fDenyTSConnections>\n     <\/component>\n     <component xmlns=\"\" name=\"Microsoft-Windows-TerminalServices-RDP-WinStationExtensions\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n        <UserAuthentication>0<\/UserAuthentication>\n     <\/component>\n     <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Networking-MPSSVC-Svc\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n        <FirewallGroups>\n           <FirewallGroup wcm:action=\"add\" wcm:keyValue=\"RemoteDesktop\">\n              <Active>true<\/Active>\n              <Profile>all<\/Profile>\n              <Group>@FirewallAPI.dll,-28752<\/Group>\n           <\/FirewallGroup>\n        <\/FirewallGroups>\n     <\/component>\n  <\/settings>\n  <settings pass=\"oobeSystem\">\n     <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n        <UserAccounts>\n           <AdministratorPassword>\n              <Value>@@{Creds_WINDOWS.secret}@@<\/Value>\n              <PlainText>true<\/PlainText>\n           <\/AdministratorPassword>\n        <\/UserAccounts>\n        <AutoLogon>\n           <Password>\n              <Value>@@{Creds_WINDOWS.secret}@@<\/Value>\n              <PlainText>true<\/PlainText>\n           <\/Password>\n           <Enabled>true<\/Enabled>\n           <Username>Administrator<\/Username>\n        <\/AutoLogon>\n\t\t<FirstLogonCommands>\n           <SynchronousCommand wcm:action=\"add\">\n              <CommandLine>cmd.exe \/c netsh advfirewall firewall add rule name=\"Port 5985\" dir=in action=allow protocol=TCP localport=5985<\/CommandLine>\n              <Description>Win RM port open<\/Description>\n              <Order>1<\/Order>\n              <RequiresUserInput>true<\/RequiresUserInput>\n           <\/SynchronousCommand>\n           <SynchronousCommand wcm:action=\"add\">\n              <CommandLine>powershell -Command \"Enable-PSRemoting -SkipNetworkProfileCheck -Force\"<\/CommandLine>\n              <Description>Enable PS-Remoting<\/Description>\n              <Order>2<\/Order>\n              <RequiresUserInput>true<\/RequiresUserInput>\n           <\/SynchronousCommand>\n           <SynchronousCommand wcm:action=\"add\">\n              <CommandLine>powershell -Command \"Set-ExecutionPolicy -ExecutionPolicy RemoteSigned\"<\/CommandLine>\n              <Description>Enable Remote-Signing<\/Description>\n              <Order>3<\/Order>\n              <RequiresUserInput>false<\/RequiresUserInput>\n            <\/SynchronousCommand>\n            <SynchronousCommand wcm:action=\"add\">\n               <Order>4<\/Order>\n               <CommandLine>REG ADD HKLM\\System\\CurrentControlSet\\Control\\Network\\NewNetworkWindowOff \/F<\/CommandLine>\n               <Description>No New Network Block<\/Description>\n               <RequiresUserInput>true<\/RequiresUserInput>\n            <\/SynchronousCommand>\n        <\/FirstLogonCommands>\n        <OOBE>\n           <HideEULAPage>true<\/HideEULAPage>\n           <SkipMachineOOBE>true<\/SkipMachineOOBE>\n        <\/OOBE>\n     <\/component>\n     <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n        <InputLocale>en-US<\/InputLocale>\n        <SystemLocale>en-US<\/SystemLocale>\n        <UILanguageFallback>en-us<\/UILanguageFallback>\n        <UILanguage>en-US<\/UILanguage>\n           <UserLocale>en-US<\/UserLocale>\n     <\/component>\n  <\/settings>\n<\/unattend>\n\n\n","type":""}},"power_state":"ON","type":"","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"image","type":"","name":"Win2019gui-1909","uuid":"81ac2d3b-33fc-45a8-8ddf-3b56774b8523"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]}],"credential_definition_list":[{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"Creds_PrismCentral"},{"username":"administrator","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"Creds_WINDOWS"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Windows2019gui"}],"name":"Package1","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"TShirt Sizing"},{"kind":"app_task","name":"CDROM Letter"},{"kind":"app_task","name":"Resize Partitions"}],"name":"ba5eb2b6_dag","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"TShirt Sizing"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"CDROM Letter"}},{"from_task_reference":{"kind":"app_task","name":"CDROM Letter"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Resize Partitions"}},{"from_task_reference":{"kind":"app_task","name":"CDROM Letter"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Resize Partitions"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows2019gui"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"TShirt Sizing","state":"ACTIVE","attrs":{"script":"# Purpose:  Sample calm script to dynamically change cpu\\mem of VM via the REST API.\n# Author: Chris Kingsley <chris.kingsley@nutanix.com>\n# Date Created:  03\/13\/2020\n# Date Modified:  03\/14\/2020\n# Modified by:  Dusty Lane <dusty.lane@nutanix.com>\n# Change log:  Added disk size, removed duplicate URI variable, added comments\n# Version: 1.1\n\n###################### DECLARE VARIABLES ######################\n#\nuri = \"https:\/\/localhost:9440\/api\/nutanix\/v3\"\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\nvm_uuid = \"@@{id}@@\"\n\n# establish credentials\nusername = '@@{Creds_PrismCentral.username}@@'\nusername_secret = '@@{Creds_PrismCentral.secret}@@'\n\n# match the tshirt size variable.\ntshirt_size = '@@{tshirt_size}@@'\nprint(tshirt_size)\n\nif tshirt_size == 'Small':\n    exit(0)\nelif tshirt_size == 'Medium':\n    vpcu = 2\n    memory = 6172\n    disk_size = 76800\nelif tshirt_size == 'Large':\n    vpcu = 4\n    memory = 8192\n    disk_size = 102400\n\n# How do we handle cost showbacks on the instances?\n\n###################### DO NOT MODIFY BELOW HERE ######################\n#\n######################     DEFINE FUNCTIONS     ######################\n\n# define the function 'rest_call'\n# this encapsulates the api call.\ndef rest_call(url, method, payload=\"\", username=username, username_secret=username_secret):\n\n# we put the accept statement in here to ensure that we will only accept it in json.\n    headers = {\n        'Content-type': 'application\/json',\n        'Accept': 'application\/json'\n    }\n\n    if payload:\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            auth=\"BASIC\",\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n    else:\n        resp = urlreq(\n            url,\n            verb=method,\n            auth=\"BASIC\",\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n# put in a try\\catch block to ensure that we have json returned\n    if resp.ok:\n        try:\n            return json.loads(resp.content)\n        except:\n            return resp.content\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(json.dumps(payload)))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n\n######################## GET VM SPEC ########################\nurl = \"{}\/vms\/{}\".format(\n    uri,\n    vm_uuid\n)\n# Define the method (get\\put\\post, etc)\nmethod = 'GET'\n\n# create a variable - use the function 'rest_call' to populate the function.\nresponse = rest_call(url=url, method=method)\n\n######################## Change\\update the  VM SPEC ########################\n# delete 'status' element from json response\ndel response['status']\n\n# update 'spec' element in the 'response' object with new vpcu and mem\nresponse['spec']['resources']['num_sockets'] = vpcu\nresponse['spec']['resources']['memory_size_mib'] = memory\n\n# let's address the space allocation on disk 0\ndel response['spec']['resources']['disk_list'][0]['disk_size_bytes']\nresponse['spec']['resources']['disk_list'][0]['disk_size_mib'] = disk_size\n\n# set the method\nmethod = 'PUT'\n# create the 'payload' object from the updated 'response' object\npayload = response\n\n# \nresponse = rest_call(url=url, method=method, payload=payload)\nprint(response)\n\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows2019gui"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"CDROM Letter","state":"ACTIVE","attrs":{"exit_status":[],"script":"#requires -version 4\n<#\n    .SYNOPSIS\n        Simple Script to change the CDROM drive letter\n    .DESCRIPTION\n        This script leverages the WMI command (if there are multiple CDs),\n        selects the first object in the array and then assigns a \n        specific letter to that device.\n    .NOTES\n        Version:        1.0\n        Author:         Dusty Lane\n        Creation Date:  03\/20\/2020\n        Purpose\/Change: Initial script development\n  \n#>\n# change drive letter of CD\nWrite-Host \"Changing drive letter for cdrom\" -ForegroundColor Green\nGet-WmiObject -Class Win32_volume -Filter 'DriveType=5' | Select-Object -First 1 | Set-WmiInstance -Arguments @{DriveLetter='B:'}","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Creds_WINDOWS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows2019gui"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Resize Partitions","state":"ACTIVE","attrs":{"exit_status":[],"script":"#requires -version 4\n<#\n    .SYNOPSIS\n        Finds raw volumes, creates partitions.  Finds free space and allocates it to partitions.\n    .DESCRIPTION\n        This script is designed to find any offline disks, bring them\n        online, initialize\\format the partitions and assign the next available\n        drive letter.\n\n        For free space found on an existing disk, it will grow the partition\n        utilizing all available free space.\n\n    .NOTES\n        Version:        1.0.1\n        Author:         Dusty Lane\n        Creation Date:  06\/08\/2020\n        Purpose\/Change: add some error handling and change logic.\n  \n#>\n\ntry {\n    # Get the disks\n\n    $Disks = Get-Disk\n\n    foreach ($Disk in $Disks) \n    {\n        # My thought process is to \n        # Bring all the drives online if they are offline....\n\n        # Let filter through any drive that might be offline.\n        if ($disk.operationalstatus -eq \"Offline\")\n        {\n            $disk | set-disk -isoffline $false \n            $disk | set-disk -isReadOnly $false\n        }\n\n        # I want to make sure that all 'raw' drives are formatted \n        # But we need to add drive letters in order....  going to \n        # convert letter to numbers and add 1, then convert back to letters.\n        #\n        # format any volumes that are 'raw'\n        if ($disk.partitionstyle -eq 'RAW')\n        {\n            Initialize-Disk -Number $disk.DiskNumber -PartitionStyle GPT -PassThru -ErrorAction SilentlyContinue\n            \n            # need to get the drive letter that would be next in line....\n            $findletter = ((get-volume | where-object {$_.driveletter -match '.'}).driveletter | Sort-Object)[-1]\n            $letter = [byte]$findletter + 1\n            $letter = [char]$letter\n            New-Partition -DiskNumber $disk.DiskNumber -DriveLetter $letter -UseMaximumSize\n            Format-Volume -DriveLetter $letter -FileSystem NTFS -NewFileSystemLabel \"$($letter)_Drive\" -Confirm:$false\n        }\n    }\n\n    # Get volumes\n    $Volumes = get-volume | where-object {$_.driveletter -match '.'} | where-object {$_.DriveType -eq 'Fixed'}\n\n    # Get partitions on each volume\n    foreach ($Volume in $Volumes)\n    {\n        # The intent here is to see if any of the drives have had space added them.\n        # I think that to do this, we need to check the partition and compare to the volume.\n        # we need to get some variables to make this happen\n        $Partition = Get-Partition -DriveLetter $Volume.DriveLetter\n        $disk = Get-Disk | Where-Object {$_.path -eq $partition.diskid}\n        # get the maximum the size the partition can be.\n        $size = (Get-PartitionSupportedSize -DiskNumber $disk.number -PartitionNumber $Partition.PartitionNumber)\n        if (($Size.SizeMax - $volume.Size) -gt 102400000)\n        {\n            Write-output \"Resizing volume $($Volume.DriveLetter)\"\n            Resize-Partition -DiskNumber $disk.number -PartitionNumber $Partition.PartitionNumber -Size $size.SizeMax -confirm:$false -whatif\n        }\n    }    \n}\ncatch {\n    $error[0]\n}\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Creds_WINDOWS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"cae79b83_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"ba5eb2b6_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"1ae97f3d_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"01c721d0_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"1ae97f3d_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"depends_on_list":[],"name":"d9df49d3_deployment","published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package1"}],"substrate_local_reference":{"kind":"app_substrate","name":"AHV_Windows"},"min_replicas":"1","variable_list":[],"description":""}],"description":"","action_list":[],"name":"AHV_Windows2019","variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"LIST","type":"LOCAL","name":"tshirt_size","value":"","label":"Instance Size","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["Small","Medium","Large"]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"Creds_WINDOWS"},"type":"USER"},"name":"Windows 2019 Gui T-Shirt"},"api_version":"3.0","metadata":{"last_update_time":"1591655203006624","kind":"blueprint","spec_version":17,"creation_time":"1585836592915498","name":"Windows 2019 Gui T-Shirt"}}