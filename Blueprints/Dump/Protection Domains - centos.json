{"status":{},"product_version":"2.7.1.2","spec":{"description":"This blueprint creates Protection Domains with user-selectable remote retention policies. It maps VMs to Protection Domains using a 1:1 system and creates a Schedule which occurs once per day. The \"None\" type will still create a local Protection Domain with a 24 hour schedule. This was done to prevent errors a Protection Domain alert in Prism while still allowing self-service VM snapshots.\n\nDay 2 Actions:\n- Create Snapshot\n- List Snapshots\n- Restore Last Snapshot\n\nRequirements and Assumptions:\n- Source and Target clusters are registered to the same Prism Central.\n- API user is configured on Prism Central.\n- Remote Site has been configured and tested on Source and Target.\n\nConfiguration:\n\n- Edit the 'remote_protection_domain_cluster' Application Profile variable.\n- Populate the correct credentials for the Prism Central API.\n- Populate the correct credentials for the user VM.","resources":{"client_attrs":{"None":{"y":-1521.980680703,"x":-964.0792679325},"c9c0e529_deployment":{"y":-1223.6876873982,"x":-1092.1431248208}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"VM"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Add to Protection Domain"}],"name":"2052b4ac_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"VM"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Add to Protection Domain","attrs":{"script":"# REST API call to Prism Central to add VM to protection domain\n\n# setup common variables\nuri = \"localhost:9440\"\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\nvm_uuid = \"@@{id}@@\"\nhostname = \"@@{calm_application_name}@@\"\nremote_cluster = \"@@{remote_protection_domain_cluster}@@\"\n\n# define backup_retention variable given user input\nbackup_type = \"@@{BackupType}@@\"\n\nif backup_type == 'NONE':\n    backup_retention = 0\nelif backup_type == 'BASIC':\n    backup_retention = 14\nelif backup_type == 'STANDARD':\n    backup_retention = 35\n\n###################### DEFINE FUNCTIONS ######################\n\ndef rest_call( url, method, payload=\"\" ):\n\n    username = '@@{Creds_PrismCentral.username}@@'\n    username_secret = '@@{Creds_PrismCentral.secret}@@'\n    headers = {\n      'content-type': 'application\/json'\n    }\n\n    if payload:\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            auth=\"BASIC\",\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n    else:\n       resp = urlreq(\n            url,\n            verb=method,\n            auth=\"BASIC\",\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )   \n\n    if resp.ok:\n        return json.loads(resp.content)\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(json.dumps(payload)))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n\n################ CREATE PROTECTION DOMAIN ######################\n\nurl = \"https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains?proxyClusterUuid={}\".format(\n    uri,\n    cluster_uuid\n)\n\nmethod = 'POST'\npayload = {\"value\":\"\"}\npayload['value'] = hostname\n\nresponse = rest_call(url=url,method=method,payload=payload)\n\nprint(\"Created protection domain {}.\".format(hostname))\n\n################ WAIT FOR VM AS UNPROTECTED ####################\n\nvm_unprotected = \"false\"\ncount = 0\nwhile not vm_unprotected == \"true\":\n    url = \"https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/unprotected_vms?proxyClusterUuid={}\".format(\n        uri,\n        cluster_uuid\n    )\n    method = 'GET'\n    response = rest_call(url=url,method=method)\n\n    # create a list of all vm missing pd\n    vm_uuid_missing_pd = []\n    for entity in response['entities']:\n        vm_uuid_missing_pd.append(entity['uuid'])\n\n    # test for our vm uuid in list of vms missing pd - solves for transient error adding to pd\n    if vm_uuid in vm_uuid_missing_pd:\n        vm_unprotected = \"true\"\n    else:\n        if count == 0:\n            print(\"Waiting for VM to be available before adding to protection domain.\")\n            count += 1\n            sleep(1)\n\n################ ADD VM PROTECTION DOMAIN ######################\n\npayload = {\n    \"app_consistent_snapshots\": False,\n    \"consistency_group_name\": \"\",\n    \"ids\": [\"\"]\n}\n\npayload['ids'] = [vm_uuid]\npayload['consistency_group_name'] = hostname\n\nmethod = 'POST'\n\nurl = \"https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}\/protect_vms?proxyClusterUuid={}\".format(\n    uri,\n    hostname,\n    cluster_uuid\n)\n\nresponse = rest_call(url=url,method=method,payload=payload)\n\nprint(\"Added VM {} to protection domain {}.\".format(hostname,hostname))\n\n################ ADD PROTECTION DOMAIN SCHEDULE ######################\n\n# an arbitrary historical start date was chosen \npayload = {\n    \"pd_name\":\"\",\n    \"type\":\"DAILY\",\n    \"every_nth\":1,\n    \"user_start_time_in_usecs\":1574924400000000,\n    \"timezone_offset\":-25200,\n    \"retention_policy\":{\n        \"local_max_snapshots\":7,\n        \"remote_max_snapshots\":{\n            \"\":\"\"\n        }\n    },\n    \"app_consistent\":False\n}\n\npayload['pd_name'] = hostname\n\nif backup_retention == 0:\n    # keep 1 day local to prevent prism warnings for pd with no schedule\n    payload['retention_policy']['local_max_snapshots'] = 1\n    del payload['retention_policy']['remote_max_snapshots']\nelse:\n    payload['retention_policy']['remote_max_snapshots'] = {remote_cluster:backup_retention}\n\nmethod = 'POST'\n\nurl = \"https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}\/schedules?proxyClusterUuid={}\".format(\n    uri,\n    hostname,\n    cluster_uuid\n)\n\nresponse = rest_call(url=url,method=method,payload=payload)\n\nif backup_retention == 0:\n    print(\"Created protection domain schedule with 1 day local retention.\")\nelse:\n    print(\"Created protection domain schedule with 7 days local and {} days remote retention.\".format(backup_retention))","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"3d518fba_runbook","main_task_local_reference":{"kind":"app_task","name":"2052b4ac_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"VM"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Remove Protection Domain"}],"name":"122af3fc_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"VM"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Remove Protection Domain","attrs":{"script":"# REST API call to Prism Central to remove protection domains\n# \n# Leverages the PRISM gateway from Prism Central.\n# In order to use the same code in both the lab and production, the prod_pc_uri is required.\n\n# setup common variables\nuri = \"localhost:9440\"\nprod_pc_uri = \"localhost:9440\"\n# \"pc006co.sjrb.ad:9440\"\nlocal_cluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\nvm_uuid = \"@@{id}@@\"\nhostname = \"@@{calm_application_name}@@\"\nremote_cluster = \"@@{remote_protection_domain_cluster}@@\"\nremote_cluster_uuid = \"000596b3-9a1b-77ac-7783-ac1f6bcc4d3f\"\n\n###################### DEFINE FUNCTIONS ######################\n\ndef rest_call( url, method, payload=\"\" ):\n\n    username = '@@{Creds_PrismCentral.username}@@'\n    username_secret = '@@{Creds_PrismCentral.secret}@@'\n\n    headers = {\n      'content-type': 'application\/json'\n    }\n\n    if payload:\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            auth=\"BASIC\",\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n    else:\n       resp = urlreq(\n            url,\n            verb=method,\n            auth=\"BASIC\",\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n\n    if resp.ok and method == \"DELETE\":\n        return\n    elif resp.ok:\n        return json.loads(resp.content)\n    # acceptable error for prot domain doesn't exist\n    elif \"Protection domain\" and \"does not exist\" in json.loads(resp.content)['message']:\n        return\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(json.dumps(payload)))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n\n################ REMOVE PROTECTION DOMAINS SRC\/TARG ######################\n\n# create a list of clusters\ncluster_uuids = []\ncluster_uuids.append(local_cluster_uuid)\n\n################ GET CLUSTER UUID #################\nurl = \"https:\/\/{}\/api\/nutanix\/v3\/clusters\/list\".format(\n    uri\n)\n\nmethod = 'POST'\npayload = {\"kind\": \"cluster\"}\n\nresponse = rest_call(url=url,method=method,payload=payload)\n\nfor entity in response['entities']:\n    if entity['status']['name'] == remote_cluster:\n        remote_cluster_uuid = entity['metadata']['uuid']\n\nif not remote_cluster_uuid:\n    print(\"Failed to find remote cluster attached to Prism Central.\")\n    exit(1)\nelse:\n    cluster_uuids.append(remote_cluster_uuid)\n\nfor cluster_uuid in cluster_uuids:\n    ################ GET CLUSTER FRIENDLY NAME #################\n\n    # retrieve friendly cluster name for more legible console output\n    if cluster_uuid == local_cluster_uuid:\n        url = \"https:\/\/{}\/api\/nutanix\/v3\/clusters\/{}\".format(\n            uri,\n            cluster_uuid\n        )\n\n        method = 'GET'\n\n        response = rest_call(url=url,method=method)\n        cluster_friendly_name = response['status']['name']\n    else:\n        cluster_friendly_name = remote_cluster\n        uri = prod_pc_uri\n\n    ################ GET ALL PROTECTION DOMAINS ###################\n    url = \"https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}?proxyClusterUuid={}\".format(\n        uri,\n        hostname,\n        cluster_uuid\n    )\n\n    method = 'GET'\n\n    prot_domains_exist = rest_call(url=url,method=method)\n\n    # only execute when a protection domain is found\n    if prot_domains_exist:\n\n        ################ REMOVE PROTECTION SCHEDULES #########################\n        url = \"https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}\/schedules?proxyClusterUuid={}\".format(\n            uri,\n            hostname,\n            cluster_uuid\n        )\n\n        method = 'DELETE'\n        response = rest_call(url=url,method=method)\n\n        print(\"Removed protection domain schedule for {}.\".format(hostname))\n\n        ################ GET ALL ONGOING REPLICATIONS ###########################\n        url = \"https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}\/replications?proxyClusterUuid={}\".format(\n            uri,\n            hostname,\n            cluster_uuid\n        )\n\n        method = 'GET'\n        response = rest_call(url=url,method=method)\n        entities = response['entities']\n\n        ################ DELETE ALL ONGOING REPLICATIONS ########################\n\n        if entities:\n            for entity in entities:\n\n                repl_id = entity['id']\n\n                url = \"https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}\/replications\/{}?proxyClusterUuid={}\".format(\n                    uri,\n                    hostname,\n                    repl_id,\n                    cluster_uuid\n                )\n\n                method = 'DELETE'\n                response = rest_call(url=url,method=method)\n\n                print(\"Removed ongoing snapshot replication from protection domain {} on cluster {}.\".format(hostname,cluster_friendly_name))\n\n        ################ GET ALL PD SNAPSHOTS ##################################\n        url = \"https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}\/dr_snapshots?proxyClusterUuid={}\".format(\n            uri,\n            hostname,\n            cluster_uuid\n        )\n\n        method = 'GET'\n        response = rest_call(url=url,method=method)\n        entities = response['entities']\n\n        ################ REM ALL LOCAL PD SNAPSHOTS ##############################\n        if entities:\n            for entity in entities:\n                snapshot_id = entity['snapshot_id']\n\n                url = \"https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}\/dr_snapshots\/{}?proxyClusterUuid={}\".format(\n                    uri,\n                    hostname,\n                    snapshot_id,\n                    cluster_uuid\n                )\n\n                method = 'DELETE'\n\n                response = rest_call(url=url,method=method)\n\n                print(\"Removed protection domain snapshots from cluster {}.\".format(cluster_friendly_name))\n\n        ################ REMOVE PROTECTION DOMAIN #################################\n\n        url = \"https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}\/?proxyClusterUuid={}\".format(\n            uri,\n            hostname,\n            cluster_uuid\n        )\n\n        method = 'DELETE'\n        response = rest_call(url=url,method=method)\n\n        print(\"Removed protection domain {} from cluster {}.\".format(hostname, cluster_friendly_name))\n    else:\n        print(\"Protection domain {} not found on cluster {}, removal steps will be skipped.\".format(hostname, cluster_friendly_name))\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"219b5e5c_runbook","main_task_local_reference":{"kind":"app_task","name":"122af3fc_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"VM"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"b9feee28_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"07b2446a_runbook","main_task_local_reference":{"kind":"app_task","name":"b9feee28_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"VM"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"a1a00f05_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"8898ec0d_runbook","main_task_local_reference":{"kind":"app_task","name":"a1a00f05_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"VM"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"e686a74e_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"8003090b_runbook","main_task_local_reference":{"kind":"app_task","name":"e686a74e_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"VM","port_list":[],"tier":"","variable_list":[],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"AHV_VM"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0f3d1550_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"918b0503_runbook","main_task_local_reference":{"kind":"app_task","name":"0f3d1550_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"AHV_VM"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0f08fd59_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"69513fc0_runbook","main_task_local_reference":{"kind":"app_task","name":"0f08fd59_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"AHV_VM","readiness_probe":{"connection_type":"SSH","retries":"5","disable_readiness_probe":false,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"120","connection_port":22,"login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"editables":{"create_spec":{"resources":{"nic_list":{},"disk_list":{"1":{"disk_size_mib":true}},"num_sockets":true,"memory_size_mib":true,"serial_port_list":{}}}},"os_type":"Linux","create_spec":{"name":"@@{calm_application_name}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"89c4632d-c481-48e1-ba35-bb920855c717"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":1,"gpu_list":[],"memory_size_mib":2048,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"#cloud-config\nusers:\n  - name: centos\n    ssh-authorized-keys:\n      - @@{CENTOS.public_key}@@\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\n"},"type":"","sysprep":null},"power_state":"ON","type":"","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"image","type":"","name":"CentOS7-1908","uuid":"80d9a170-e05f-4d1d-810b-e1dafe450350"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}},{"data_source_reference":null,"type":"","disk_size_mib":10240,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":1,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":{"OSType":"Windows"}},"variable_list":[]}],"credential_definition_list":[{"username":"Administrator","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"Creds_Windows"},{"username":"apiuser","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"Creds_PrismCentral"},{"username":"centos","description":"","type":"KEY","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"CENTOS"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"VM"}],"name":"Package1","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"fce0c026_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"d606722e_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"fce0c026_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"de32d913_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"42ff8cb1_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"de32d913_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"depends_on_list":[],"name":"c9c0e529_deployment","published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package1"}],"substrate_local_reference":{"kind":"app_substrate","name":"AHV_VM"},"min_replicas":"1","variable_list":[],"description":""}],"description":"","action_list":[{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Create Snapshot"}],"name":"5507abca_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"VM"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create Snapshot","attrs":{"script":"# REST API call to Prism Central to create an ad hoc \/ oob VM snapshot\n\n# setup common variables\nuri = 'localhost:9440'\ncluster_uuid = '@@{platform.status.cluster_reference.uuid}@@'\nvm_uuid = '@@{id}@@'\nhostname = '@@{calm_application_name}@@'\nremote_cluster = '@@{remote_protection_domain_cluster}@@'\n\n###################### DEFINE FUNCTIONS ######################\n\ndef rest_call( url, method, payload=\"\" ):\n\n    username = '@@{Creds_PrismCentral.username}@@'\n    username_secret = '@@{Creds_PrismCentral.secret}@@'\n    headers = {\n      'content-type': 'application\/json'\n    }\n\n    if payload:\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n    else:\n       resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )   \n\n    if resp.ok:\n        return json.loads(resp.content)\n    else:\n        print('Request failed')\n        print('Headers: {}'.format(headers))\n        print('Payload: {}'.format(json.dumps(payload)))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n\ndef get_last_snapshot_id( uri,hostname,cluster_uuid,rest_call ):\n    ################ DETERMINE ID OF LAST SNAPSHOT ###################\n\n    url = 'https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}\/dr_snapshots?proxyClusterUuid={}'.format(\n        uri,\n        hostname,\n        cluster_uuid\n    )\n\n    method = 'GET'\n\n    response = rest_call(url=url,method=method)\n    entities = response['entities']\n\n    snapshot_list = []\n    for entity in entities:\n\n        snapshot_list.append(entity['snapshot_id'])\n\n    # sort list of oob snaps descending and capture last snap id\n    snapshot_list.sort(reverse=True)\n    snapshot_id = snapshot_list[0]\n    return snapshot_id\n\n################ TAKE OOB SNAPSHOT IN PD ######################\n\nlast_snapshot_id = get_last_snapshot_id(uri=uri,hostname=hostname,cluster_uuid=cluster_uuid,rest_call=rest_call)\nsnapshot_id = last_snapshot_id\n\nurl = 'https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}\/oob_schedules?proxyClusterUuid={}'.format(\n    uri,\n    hostname,\n    cluster_uuid\n)\n\nmethod = 'POST'\npayload = {\n  \"app_consistent\": False,\n  \"remote_site_names\": [],\n  \"schedule_start_time_usecs\": 123,\n  \"snapshot_retention_time_secs\": 86400\n}\n\nschedule_start_time = _datetime.datetime.now().strftime('%s')\npayload['schedule_start_time_usecs'] = schedule_start_time\n\nresponse = rest_call(url=url,method=method,payload=payload)\n\n# loop until the oob snapshot id is returned\nwhile snapshot_id == last_snapshot_id:\n    snapshot_id = get_last_snapshot_id(uri=uri,hostname=hostname,cluster_uuid=cluster_uuid,rest_call=rest_call)\n    sleep(1)\n\nprint('Created snapshot id {} on {}.'.format(snapshot_id,hostname))","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"74d44439_runbook","main_task_local_reference":{"kind":"app_task","name":"5507abca_dag"},"variable_list":[]},"name":"Create VM Snapshot"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"List Snapshot"}],"name":"376e661e_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"VM"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"List Snapshot","attrs":{"script":"# REST API call to Prism Central to list all available VM snapshots\n\n# setup common variables\nuri = 'localhost:9440'\ncluster_uuid = '@@{platform.status.cluster_reference.uuid}@@'\nvm_uuid = '@@{id}@@'\nhostname = '@@{calm_application_name}@@'\nremote_cluster = '@@{remote_protection_domain_cluster}@@'\n\n###################### DEFINE FUNCTIONS ######################\n\ndef rest_call( url, method, payload=\"\" ):\n\n    username = '@@{Creds_PrismCentral.username}@@'\n    username_secret = '@@{Creds_PrismCentral.secret}@@'\n    headers = {\n      'content-type': 'application\/json'\n    }\n\n    if payload:\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n    else:\n       resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )   \n\n    if resp.ok:\n        return json.loads(resp.content)\n    else:\n        print('Request failed')\n        print('Headers: {}'.format(headers))\n        print('Payload: {}'.format(json.dumps(payload)))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n\n################ DETERMINE ID OF LAST SNAPSHOT ###################\n\nurl = 'https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}\/dr_snapshots?proxyClusterUuid={}'.format(\n    uri,\n    hostname,\n    cluster_uuid\n)\n\nmethod = 'GET'\n\nresponse = rest_call(url=url,method=method)\nentities = response['entities']\n\nprint('{0:25}' '{1}'.format('SnapshotID','Time'))\nfor entity in entities:\n    \n    snapshot_id = entity['snapshot_id']\n    \n    # time is in usec and needs trimmed, formatted\n    time = str(entity['snapshot_create_time_usecs'])\n    time = int(time[:-6:])\n    time = _datetime.datetime.fromtimestamp(time).strftime('%x %X')\n    print('{0:25}' '{1}'.format(snapshot_id,time))","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"73923190_runbook","main_task_local_reference":{"kind":"app_task","name":"376e661e_dag"},"variable_list":[]},"name":"List VM Snapshots"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Restore Last Snapshot"}],"name":"f263c47a_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"VM"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Restore Last Snapshot","attrs":{"script":"# REST API call to Prism Central to restore a VM from the last snapshot\n\n# setup common variables\nuri ='localhost:9440'\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\nvm_uuid = '@@{id}@@'\nhostname = '@@{calm_application_name}@@'\n\n###################### DEFINE FUNCTIONS ######################\n\ndef rest_call( url, method, payload=\"\" ):\n\n    username = '@@{Creds_PrismCentral.username}@@'\n    username_secret = '@@{Creds_PrismCentral.secret}@@'\n    headers = {\n      'content-type': 'application\/json'\n    }\n\n    if payload:\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            auth=\"BASIC\",\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n    else:\n       resp = urlreq(\n            url,\n            verb=method,\n            auth=\"BASIC\",\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )   \n\n    if resp.ok:\n        return json.loads(resp.content)\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(json.dumps(payload)))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n\n################ RETURN SNAPSHOT ID OF LATEST SNAP #############\n\nurl = \"https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}\/dr_snapshots?proxyClusterUuid={}\".format(\n    uri,\n    hostname,\n    cluster_uuid\n)\n\nmethod = 'GET'\n\nresponse = rest_call(url=url,method=method)\nentities = response['entities']\nsnapshot_list = []\n\n# create list of all snapshot ids\nfor entity in entities:\n\n    snapshot_list.append(entity['snapshot_id'])\n\n# sort list of snaps descending\nsnapshot_list.sort(reverse=True)\nsnapshot_id = snapshot_list[0]\n\n################ RESTORE VM FROM GIVEN SNAPSHOT ID #############\n\nurl = \"https:\/\/{}\/PrismGateway\/services\/rest\/v2.0\/protection_domains\/{}\/restore_entities?proxyClusterUuid={}\".format(\n    uri,\n    hostname,\n    cluster_uuid\n)\n\nmethod = 'POST'\n\npayload = {\n  \"replace\": True,\n  \"snapshot_id\": \"\",\n  \"vm_names\": [],\n  \"path_prefix\": \"\"\n}\n\npath_prefix = None\npayload['path_prefix'] = path_prefix\npayload['snapshot_id'] = snapshot_id\npayload['vm_names'] = [hostname]\n\nresponse = rest_call(url=url,method=method,payload=payload)\n\nprint(\"Restored VM {} from snapshot {}. The VM was restored in a powered off state.\".format(hostname,snapshot_id))","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"27e267d7_runbook","main_task_local_reference":{"kind":"app_task","name":"f263c47a_dag"},"variable_list":[]},"name":"Restore Last VM Snapshot"}],"name":"Nutanix","variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"None - Self-managed 24hr snapshots are available.\nBasic - 7 days local and 14 days remote.\nStandard - 7 days local and 35 days remote.","data_type":"BASE","type":"LOCAL","name":"BackupType","value":"NONE","label":"Backup SLA","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["NONE","BASIC","STANDARD"]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"remote_protection_domain_cluster","value":"cluster2","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"Creds_Windows"},"type":"USER"},"name":"Protection Domains - centos"},"api_version":"3.0","metadata":{"last_update_time":"1584838663394354","kind":"blueprint","spec_version":5,"creation_time":"1583962261454452","name":"Protection Domains - centos"}}